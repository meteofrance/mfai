"""Scripts that runs the py2puml tool on the mfai module

py2puml does not support type hinting Literal[]

To circumvent those limitations, create a modified copy of the source code.
"""

import importlib
import os
from pathlib import Path
import pkgutil
import re
import shutil
import subprocess
import sys
from typing import Iterator
from multiprocessing import Pool
import plantuml


LIB_PATH: Path = Path('mfai/')
TEMP_PATH: Path = Path('doc/class_diagrams/mfai/')


def clean_script(script_path: Path) -> str:
    """Reads and clean a script from the synthax unsuported by py2puml.
    """
    with open(script_path, 'r') as file:
        script: str = file.read()

        # typing.Literal unsuported: https://github.com/lucsorel/py2puml/issues/91
        script = re.sub(': .*Literal\[.*\].*=', '=', script)
        script = re.sub(': .*Literal\[.*\].*,', ',', script)
        script = re.sub(': .*Literal\[.*\].*$', '', script)

    return script


def walk_folder_for_py2puml(root_dir_path: str) -> Iterator[tuple[str, str]]:
    """Walk a folder and returns arguments for py2puml command. (file_path, module_path)
    """
    for dirpath, dirnames, filenames in os.walk(root_dir_path):
        if '__pycache__' in dirpath:
            continue
        for filename in filenames:
            path: str = os.path.join(dirpath, filename)
            module_path = path.replace('/', '.')[:-3]
            yield (path, module_path)
        for dirname in dirnames:
            path: str = os.path.join(dirpath, dirname)
            module_path = path.replace('/', '.')
            yield (path, module_path)



def walk_folder_for_plantuml(root_dir_path: str) -> Iterator[Path]:
    """Walk a folder and returns the paths of all .puml files.
    """
    for dirpath, _, filenames in os.walk(root_dir_path):
        for filename in filenames:
            file_path = Path(dirpath) / filename
            if not file_path.suffix == '.puml':
                continue
            yield file_path


def generate_diagram(path_and_name: tuple[str, str]) -> None:
    path, name = path_and_name
    subprocess_result: subprocess.CompletedProcess = subprocess.run(
        ["python3", "-B", "-m", "py2puml", path, name],
        capture_output=True,
        )

    if subprocess_result.stderr:
        print()
        print(f'\nDiagram Making Error: {path}, {name}')
        print(subprocess_result.stderr.decode("utf-8"))
        return

    # Do not save empty diagrams
    # An empty plantuml diagram generated by py2puml is ~110 characters long
    if len(subprocess_result.stdout.decode("utf-8")) < 150:
        return

    save_folder = Path(path.replace('doc/class_diagrams/mfai/', 'doc/class_diagrams/')).parent
    save_name = name.split('.')[-1] + '.puml'
    if save_name == '__init__.puml':
        save_name = save_folder.name + '.puml'
    if not save_folder.exists():
        os.makedirs(save_folder)

    with open(save_folder / save_name, 'w+') as file:
        file.write(subprocess_result.stdout.decode("utf-8"))


def convert_to_png(source_path: Path) -> None:
    out_path = source_path.with_suffix('.png')
    subprocess_result: subprocess.CompletedProcess = subprocess.run(
        ["python3", "-m", "plantuml", source_path],
        capture_output=True,
        )
    
    # print error
    if subprocess_result.stderr:
        print()
        print(f'\nDiagram Making Error: {source_path} -> {out_path}')
        print(subprocess_result.stderr.decode("utf-8"))
        return

    # Erase puml file
    os.remove(source_path)


if __name__ == '__main__':
    # walk, copy and clean all files in mfai
    file_count = 0
    for dirpath, _, filenames in os.walk(LIB_PATH):
        if '__pycache__' in dirpath:
            continue

        output_dir = Path(dirpath)
        for file_name in filenames:
            file_name_path = Path(file_name)
            if file_name_path.suffix != '.py':
                continue
        
            script_cleaned: str = clean_script(output_dir / file_name_path)
            
            # Skip empty files
            if len(script_cleaned) < 10:
                continue

            out_dir = TEMP_PATH / output_dir.relative_to(LIB_PATH)
            if not out_dir.exists():
                os.makedirs(out_dir)
            with open(out_dir / file_name_path, 'w+') as file:
                file.write(script_cleaned)
            file_count += 1

    # Run py2puml
    folder_walk = list()
    nb_process = len(folder_walk)
    with Pool(9) as pool:
        pool.map(generate_diagram, walk_folder_for_py2puml('doc/class_diagrams/mfai'))
    
        # Convert all py2puml to png
        pool.map(convert_to_png, walk_folder_for_plantuml('doc/class_diagrams'))

    # Clean
    if TEMP_PATH.exists:
        shutil.rmtree(TEMP_PATH)