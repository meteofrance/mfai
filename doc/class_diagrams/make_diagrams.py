"""Scripts that runs the py2puml tool on the mfai module

py2puml does not support type hinting Literal[]

To circumvent those limitations, create a modified copy of the source code.
"""

import os
from pathlib import Path
import pkgutil
import re
import shutil
import subprocess
from typing import Iterator


LIB_PATH: Path = Path('../../mfai/')
TEMP_PATH: Path = Path('./mfai/')


def clean_script(script_path: Path) -> str:
    """Reads and clean a script from the synthax unsuported by py2puml.
    """
    with open(script_path, 'r') as file:
        script: str = file.read()

        # typing.Literal unsuported: https://github.com/lucsorel/py2puml/issues/91
        script = re.sub(': .*Literal\[.*\].*=', '=', script)
        script = re.sub(': .*Literal\[.*\].*,', ',', script)
        script = re.sub(': .*Literal\[.*\].*$', '', script)

    return script


def walk_folder_for_py2puml(root_dir_path: str) -> Iterator[tuple[str, str]]:
    """Walk a folder and returns arguments for py2puml command. (file_path, module_path)
    """
    for dirpath, dirnames, filenames in os.walk(root_dir_path):
        for filename in filenames:
            path: str = os.path.join(dirpath, filename)
            module_path = path.replace('/', '.')[:-3]
            yield (path, module_path)
        for dir in dirnames:
            yield from walk_folder_for_py2puml(os.path.join(dirpath, dir))



if __name__ == '__main__':
    # walk, copy and clean all files in mfai
    for root_path, dir_paths, file_names in os.walk(LIB_PATH):
        root_path = Path(root_path)

        for file_name in file_names:
            file_name = Path(file_name)
            if file_name.suffix != '.py':
                continue
        
            script_cleaned: str = clean_script(root_path / file_name)
            out_dir = TEMP_PATH / root_path.relative_to(LIB_PATH)
            if not out_dir.exists():
                os.makedirs(out_dir)
            with open(out_dir / file_name, 'w+') as file:
                file.write(script_cleaned)

    # Run py2puml
    for path, name in walk_folder_for_py2puml('mfai'):
        subprocess_result: subprocess.CompletedProcess = subprocess.run(
            ["python3", "-m", "py2puml", path, name],
            capture_output=True,
            )

        if subprocess_result.stderr:
            print(path, name)
            print(subprocess_result.stderr.decode("utf-8"))
            continue

        # Do not save empty diagrams
        # An empty plantuml diagram generated by py2puml is ~110 characters long
        if len(subprocess_result.stdout.decode("utf-8")) < 150:
            continue

        save_folder = path
        with open(f'{name}.puml', 'w+') as file:
            file.write(subprocess_result.stdout.decode("utf-8"))

    # Clean
    if TEMP_PATH.exists:
        shutil.rmtree(TEMP_PATH)